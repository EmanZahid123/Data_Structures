#Code is very similar to doubly-LL3. Append,delete functions are made.
class Node:
    def __init__(self,data=None):
        self.data=data
        self.prev=None
        self.next=None
class SimpleDoubly:
    def __init__(self):
        self.head=None
    def append_at_first(self,val):
        if self.head==None:
            self.head=Node(val)
            return
        n=Node(val)
        n.next=self.head
        self.head.prev=n
        self.head=self.head.prev
    def append(self,val):
        if self.head==None:
            n=Node(val)
            self.head=n
            return
        else:
            cur=self.head
            while cur.next!=None:
                cur=cur.next
            n=Node(val)
            cur.next=n
            n.prev=cur
    def delete(self,index):
        if self.head==None:
            print("list is empty")
            return
        else:
            if index==0:
                self.head=self.head.next
                self.head.prev=None
                return
            i=0
            cur=self.head
            while i!=index and cur!=None:
                i+=1
                cur=cur.next
            if cur==None:
                print("Index not found")
                return

            cur.prev.next=cur.next
            if cur.next!=None:
                cur.next.prev=cur.prev
            del cur
    def removeatend(self):
        if self.head==None:
            print("list is empty")
            return
        else:
            cur=self.head
            while cur.next!=None:
                cur=cur.next
            cur.prev.next=None
    def remove_content(self,val):
        if self.head==None:
            print("list is empty")
            return
        cur=self.head
        while cur!=None and cur.data!=val  :
            cur=cur.next
        if cur==None:
                print("Value not found")
                return
        if cur.prev==None:
            self.head=cur.next
            return
        cur.prev.next=cur.next
        if cur.next!=None:
            cur.next.prev=cur.prev
        #del cur


    def display(self):
        if self.head is None:
            print("list is empty")
            return
        cur=self.head
        while cur!=None:
            print(cur.data,end=" ")
            cur=cur.next
        print()
    def count(self):
        count=0
        cur=self.head
        while cur!=None:
            count+=1
            cur=cur.next
        return count
    def rprint(self):
        self.rprintaux(self.head)
    def rprintaux(self,node):
        if node==None:
            return
        self.rprintaux(node.next)
        print(node.data,end=" ")

def main():
    d=SimpleDoubly()
    d.append(23)
    d.append(45)
    d.append(78)
    d.append(90)

    d.display()
    print(d.count())
    d.delete(3)
    d.display()
    d.removeatend()
    d.display()
    d.append_at_first(368)
    d.display()
    d.remove_content(45)
    d.append(67)
    d.display()
    d.rprint()
main()




